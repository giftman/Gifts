#!/usr/bin/perl -w
##Copyright (C) 2013 by CF  !!!! 
#闭环 closure:访问了外部声明的私有变量 ,那么这个subroutine 就叫做closure.
#??The closure declaration increases the reference count of the referent, as if another reference had been taken explicitly. Right at the end of the bare block, the reference count of $count is two, but after the block has exited, the value still has a reference count of one. Although no other code may access $count, it will still be kept in memory as long as the reference to the subroutine is available in $callback or elsewhere.
#
use warnings;
use Data::Dumper;
use File::Find;

#First closure
#my $total_size = 0;
#find(sub {$total_size += -s if -f },".");
#print $total_size,"\n";

#Second
#my $callback;
#{
#    my $count = 0;
#    $callback = sub {print ++$count,":$File::Find::name\n"};
#}
#find($callback,".");

#Returning a Subroutine from a Subroutine
#sub create_find_callback_that_counts {
#    my $count = 0;
#    return sub {print ++$count,":$File::Find::name\n"};
#}
#my $callback = create_find_callback_that_counts(  );
#print "my bin:\n";
#find($callback,"/usr/bin");
#print "my lib\n";
#find($callback,"lib");

#call the subroutines more than once
#sub create_find_callbacks_that_sum_the_size {
#    my $total_size = 0;
#    return(sub{$total_size += -s if -f },sub{ return $total_size });
#}
#my %subs;
#foreach my $dir(qw(/usr/bin lib /usr/lib)){
#    my($callback,$getter) = create_find_callbacks_that_sum_the_size();
#    $subs{$dir}{CALLBACK} = $callback;
#    $subs{$dir}{GETTER}= $getter;
#}
#for (keys %subs){
#    print "find $_ \n";
#    find($subs{$_}{CALLBACK},$_);
#}
#for (sort keys %subs){
#    my $sum = $subs{$_}{GETTER}->(  );
#    print "$_ has $sum bytes\n";
#}
#
#


#Closure Variable as Inputs
sub print_bigger_than{
    my $minimum_size = shift;
    return sub{print "$File::Find::name\n" if -f and -s >= $minimum_size};
}

my $bigger_than_1024 = print_bigger_than(1024);
find($bigger_than_1024,'/usr/bin');
__DATA__
name1 A C AA SS AS SA 00
name2 A H WW WA AA AW 00
name3 A I AY YA YY AA 00
name4 C H CC CZ ZZ ZC 00
