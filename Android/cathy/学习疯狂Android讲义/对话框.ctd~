<?xml version="1.0" ?><cherrytree><node name="110" prog_lang="custom-colors" readonly="False" tags="CrazyAndroid" unique_id="1"><rich_text>2012/11/23 - 09:03

</rich_text><rich_text scale="h2">对话框</rich_text><rich_text>  
</rich_text><rich_text scale="h2">AlertDialog</rich_text><rich_text>：View.OnClickListener()
1. AlertDialog.Builder
2. Builder的方法为对话框设置图标，标题，内容等
3. Builder.onCreate
4. show()

具有setItems 一选即定
,setMultiChoiceItems,　多选
setSingleChoiceItems　单选，需要按确定，多此一举？
setAdapter

  一、AlertDialog简介：AlertDialog的构造方法被声明为protected，所以不能直接使用new关键字来创建AlertDialog类的对象实例。要想创建AlertDialog对话框，需要使用Builder类，该类是AlertDialog类中定义的一个内嵌类。因此必须创建AlertDialog.Builder类的对象实例，然后再调用show()来显示对话框。 
  
方法都差不多，看例子（用builder生成这一切的dialog）还有positive/negative Button　Neutral Button　等会提醒我

This method is deprecated.
  Use the new </rich_text><rich_text link="webs http://developer.android.com/reference/android/app/DialogFragment.html">DialogFragment</rich_text><rich_text> class with </rich_text><rich_text link="webs http://developer.android.com/reference/android/app/FragmentManager.html">FragmentManager</rich_text><rich_text> instead; this is also available on older platforms through the Android compatibility package.
</rich_text><rich_text justification="left"></rich_text><rich_text>
</rich_text><rich_text justification="left"></rich_text><rich_text>

我们来看一下官方现在的新方法：

</rich_text><rich_text justification="left"></rich_text><rich_text>
</rich_text><rich_text justification="left"></rich_text><rich_text>

用SimpleAdapter:
</rich_text><rich_text justification="left"></rich_text><rich_text>

</rich_text><rich_text scale="h2">SetView</rich_text><rich_text>:Creating a Custom Layout
</rich_text><rich_text justification="left"></rich_text><rich_text>

</rich_text><rich_text justification="left"></rich_text><rich_text>

</rich_text><rich_text justification="left"></rich_text><rich_text>

最后也有一个速成的方法，直接将Activity当做Dialog用：&lt;activity android:theme=&quot;@android:style/Theme.Holo.Dialog&quot; &gt;
    
最后的最后：一般我们监听时可以直接在DialogFragment里的listener,但是部件如EditText或者这些就要用发起Dialog的Activity，下面这个例子就是直接用了两个接口，使得在Fragment里面发生的事情又传回了Activty.虽然我还不是很懂</rich_text><rich_text foreground="#ffff00000000">Attach的作用</rich_text><rich_text>？

Ｆｒａｇｍｅｎｔ:
</rich_text><rich_text justification="left"></rich_text><rich_text>
主程序：
</rich_text><rich_text justification="left"></rich_text><rich_text>


我曾经经常失眠，现在 10 秒可以入睡，向大家介绍一下方法。

方法的关键是找到入睡的边界。

大家一定有过经历，刚睡着的一瞬间又突然醒来，这个时候你的意识是很清晰的分辨出两件事：1）前 1 秒你还醒着，周围大概发生着什么事；2）当前 1 秒你已经睡着的又被唤醒的感觉。只要你曾有过这样的经历，我就好继续说方法了。

假想一下，每次入睡，就好像在你的体内都有一个睡神，他悄悄的来，把你放倒了，你压根不知道这一切是怎么发生的，他什么时候来，从什么时间开始，也永远回忆不起来。是的，这个睡神，他是你寻觅不到的，你也没法分辨出来。

那既然不能分辨出来，那如何找到入睡的边界呢？别急，你再假想一下，除了睡神，你体内还有一位不想睡觉的小人，入睡的过程，就是睡神打败不想睡觉小人的过程。好了，关键点来了，虽然你无法分辩出睡神，但是你可以识别出不想睡觉小人，这个小人就是你的意识，当睡意来袭时，你不断提醒和暗示自己不要睡着，一次次从入睡的边缘清醒过来，就是不想睡觉小人不断击败睡神的过程！

找到了不想睡觉的小人——唤醒自己那一瞬间的感觉——就找到入睡的边界。除非是严重的彻底失眠，你最终还是会睡着的，也是就绝大部分情况，不想睡觉的小人是打不过睡神的，每次入睡无非是一个不想睡觉小人所守护的城墙被击破的过程，只不过有时时间长，有时时间短。

想快速入睡，就加快这个过程。首先你要和小人站在一起，无论睡神来没有来——反正你也不知道，你都假想睡神来了，防御开始了！神奇的就在这里，虽然睡神可能还没来，但你一旦主动进入防御，就会把进攻方勾来。记住，除非严重失眠，你是一定会睡着的，主动防御就意味着战斗——一场必输的战斗——提前打响。之后，就是你会一次次从边缘清醒过来，没几次，城墙就破了，你也睡着了。

以上就是方法的全部，听起来复杂，执行起来头几次也很别扭，但你一旦找到攻城回合的节奏和感觉（对，每次清醒过来，你都会有同样的感觉），回合进行速度和破城速度会越来越快，你也会达到 10 秒（我其实最快是 1 秒）。
</rich_text><codebox char_offset="686" frame_height="200" frame_width="800" highlight_brackets="False" show_line_numbers="False" syntax_highlighting="xml" width_in_pixels="True">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
	android:orientation=&quot;vertical&quot;
	android:layout_width=&quot;fill_parent&quot;
	android:layout_height=&quot;fill_parent&quot;
	android:gravity=&quot;center_horizontal&quot;
	&gt;
	&lt;EditText android:id=&quot;@+id/editText&quot;
	    android:layout_width=&quot;fill_parent&quot;
	android:layout_height=&quot;wrap_content&quot;
	    /&gt;
&lt;Button android:id=&quot;@+id/bn01&quot;
    android:layout_width=&quot;fill_parent&quot;
	android:layout_height=&quot;wrap_content&quot;/&gt;
&lt;/LinearLayout&gt;</codebox><codebox char_offset="688" frame_height="200" frame_width="800" highlight_brackets="False" show_line_numbers="False" syntax_highlighting="java" width_in_pixels="True">package com.cf.studyview;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.app.Dialog;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.DialogInterface.OnMultiChoiceClickListener;
import android.graphics.Color;

import android.os.Bundle;
import android.view.View;

import android.widget.Button;
import android.widget.EditText;

public class StudyView extends Activity {
	final int SINGLE_DIALOG = 0x113;
	final int MULTICHOISE = 0x112;
	@Override
	public void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);
		Button bn = (Button)findViewById(R.id.bn01);
		//为按钮绑定事件监听器
		bn.setOnClickListener(new View.OnClickListener()
		{
			@Override
			public void onClick(View source)
			{
				//显示对话框改成了二选一
				showDialog(SINGLE_DIALOG);	
				//showDialog(MULTICHOISE);	
			}
		});
	}；
	//重写onCreateDialog方法创建对话框
	@Override
	public Dialog onCreateDialog(int id, Bundle state)
	{
		//判断需要生成哪种类型的对话框
		
		switch (id)
		{
			case SINGLE_DIALOG:
				Builder b = new AlertDialog.Builder(this);
				// 设置对话框的图标
				//b.setIcon(R.drawable.tools);
				// 设置对话框的标题
				b.setTitle(&quot;单选列表对话框&quot;);
				// 为对话框设置多个列表
				b.setSingleChoiceItems(new String[]
				{ &quot;红色&quot;, &quot;绿色&quot;, &quot;蓝色&quot; }
				// 默认选中第二项
					, 1
					//为列表项的单击事件设置监听器
					, new OnClickListener()
					{
						@Override
						public void onClick(DialogInterface dialog,
							int which)
						{
							EditText show = (EditText) findViewById(R.id.editText);
							// which代表哪个列表项被单击了
							switch (which)
							{
								//修改文本框的背景色
								case 0:
									show.setBackgroundColor(Color.RED);
									break;
								case 1:
									show.setBackgroundColor(Color.GREEN);
									break;
								case 2:
									show.setBackgroundColor(Color.BLUE);
									break;
							}
						}
					});
				// 添加一个“确定”按钮，用于关闭该对话框
				b.setPositiveButton(&quot;确定&quot;, null);
				// 创建对话框
				return b.create();
			case MULTICHOISE:
				Builder builder = new AlertDialog.Builder(this);
				final boolean[] checkStatus = new boolean[]{true,false,true};
				final String colorNames[]=new String[]{&quot;red&quot;, &quot;green&quot;, &quot;bule&quot;};
			    builder.setMultiChoiceItems(new String[]{&quot;red&quot;, &quot;green&quot;, &quot;bule&quot;}, checkStatus, new OnMultiChoiceClickListener() {
				
				@Override
				public void onClick(DialogInterface dialog, int which,boolean isChecked) {
					EditText show=(EditText)findViewById(R.id.editText);
					String result=&quot;You choice is:&quot;;
					for(int i=0;i&lt;checkStatus.length;i++){
						if(checkStatus[i]){
							result+=colorNames[i]+&quot;,&quot;;
						}
					}
					show.setText(result);
				}
			});
			    return builder.create();	
		}
		return null;
	}
}</codebox><codebox char_offset="708" frame_height="200" frame_width="800" highlight_brackets="False" show_line_numbers="False" syntax_highlighting="xml" width_in_pixels="True">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
	android:orientation=&quot;vertical&quot;
	android:layout_width=&quot;fill_parent&quot;
	android:layout_height=&quot;fill_parent&quot;
	android:gravity=&quot;center_horizontal&quot;
	&gt;
	&lt;EditText android:id=&quot;@+id/editText&quot;
	    android:layout_width=&quot;fill_parent&quot;
	android:layout_height=&quot;wrap_content&quot;
	    /&gt;
&lt;Button android:id=&quot;@+id/bn01&quot;
    android:layout_width=&quot;fill_parent&quot;
	android:layout_height=&quot;wrap_content&quot;/&gt;
&lt;/LinearLayout&gt;</codebox><codebox char_offset="710" frame_height="200" frame_width="800" highlight_brackets="False" show_line_numbers="False" syntax_highlighting="java" width_in_pixels="True">package com.cf.studyview;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.app.Dialog;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.DialogInterface.OnMultiChoiceClickListener;
import android.graphics.Color;

import android.os.Bundle;
import android.view.View;

import android.widget.Button;
import android.widget.EditText;

public class StudyView extends Activity {
	final int SINGLE_DIALOG = 0x113;
	final int MULTICHOISE = 0x112;
	@Override
	public void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);
		Button bn = (Button)findViewById(R.id.bn01);
		//为按钮绑定事件监听器
		bn.setOnClickListener(new View.OnClickListener()
		{
			@Override
			public void onClick(View source)
			{
				//显示对话框改成了二选一
				showDialog(SINGLE_DIALOG);	
				//showDialog(MULTICHOISE);	
			}
		});
	}
	//重写onCreateDialog方法创建对话框
	@Override
	public Dialog onCreateDialog(int id, Bundle state)
	{
		//判断需要生成哪种类型的对话框
		
		switch (id)
		{
			case SINGLE_DIALOG:
				Builder b = new AlertDialog.Builder(this);
				// 设置对话框的图标
				//b.setIcon(R.drawable.tools);
				// 设置对话框的标题
				b.setTitle(&quot;单选列表对话框&quot;);
				// 为对话框设置多个列表
				b.setSingleChoiceItems(new String[]
				{ &quot;红色&quot;, &quot;绿色&quot;, &quot;蓝色&quot; }
				// 默认选中第二项
					, 1
					//为列表项的单击事件设置监听器
					, new OnClickListener()
					{
						@Override
						public void onClick(DialogInterface dialog,
							int which)
						{
							EditText show = (EditText) findViewById(R.id.editText);
							// which代表哪个列表项被单击了
							switch (which)
							{
								//修改文本框的背景色
								case 0:
									show.setBackgroundColor(Color.RED);
									break;
								case 1:
									show.setBackgroundColor(Color.GREEN);
									break;
								case 2:
									show.setBackgroundColor(Color.BLUE);
									break;
							}
						}
					});
				// 添加一个“确定”按钮，用于关闭该对话框
				b.setPositiveButton(&quot;确定&quot;, null);
				// 创建对话框
				return b.create();
			case MULTICHOISE:
				Builder builder = new AlertDialog.Builder(this);
				final boolean[] checkStatus = new boolean[]{true,false,true};
				final String colorNames[]=new String[]{&quot;red&quot;, &quot;green&quot;, &quot;bule&quot;};
			    builder.setMultiChoiceItems(new String[]{&quot;red&quot;, &quot;green&quot;, &quot;bule&quot;}, checkStatus, new OnMultiChoiceClickListener() {
				
				@Override
				public void onClick(DialogInterface dialog, int which,boolean isChecked) {
					EditText show=(EditText)findViewById(R.id.editText);
					String result=&quot;You choice is:&quot;;
					for(int i=0;i&lt;checkStatus.length;i++){
						if(checkStatus[i]){
							result+=colorNames[i]+&quot;,&quot;;
						}
					}
					show.setText(result);
				}
			});
			    return builder.create();	
		}
		return null;
	}
}</codebox><codebox char_offset="729" frame_height="200" frame_width="800" highlight_brackets="False" show_line_numbers="False" syntax_highlighting="java" width_in_pixels="True">List &lt;Map&lt;String,Object&gt;&gt; listItems=new ArrayList&lt;Map&lt;String,Object&gt;&gt;();
		for (int i=0;i&lt;names.length;i++){
			Map&lt;String,Object&gt; listItem=new HashMap&lt;String, Object&gt;();
			listItem.put(&quot;name&quot;, names[i]);
			listItem.put(&quot;icon&quot;, imageIds[i]);
			listItems.add(listItem);
		}
		SimpleAdapter adapter=new SimpleAdapter(getActivity(), listItems, R.layout.row, new String[]{&quot;name&quot;, &quot;icon&quot;},new int[]{R.id.name,R.id.icon});
		b.setAdapter(adapter, new OnClickListener() {
			
			public void onClick(DialogInterface dialog, int which) {
				EditText show=(EditText)getActivity().findViewById(R.id.editText);
				show.setText(&quot;你最擅长的种族为：&quot;+ names[which]);
			}
		});
		 return b.create();</codebox><encoded_png char_offset="765"></encoded_png><codebox char_offset="768" frame_height="200" frame_width="800" highlight_brackets="False" show_line_numbers="False" syntax_highlighting="xml" width_in_pixels="True">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:orientation=&quot;vertical&quot;
    android:layout_width=&quot;wrap_content&quot;
    android:layout_height=&quot;wrap_content&quot;&gt;
    &lt;ImageView
        android:src=&quot;@drawable/header_logo&quot;
        android:layout_width=&quot;match_parent&quot;
        android:layout_height=&quot;64dp&quot;
        android:scaleType=&quot;center&quot;
        android:background=&quot;#FFFFBB33&quot;
        android:contentDescription=&quot;@string/app_name&quot; /&gt;
    &lt;EditText
        android:id=&quot;@+id/username&quot;
        android:inputType=&quot;textEmailAddress&quot;
        android:layout_width=&quot;match_parent&quot;
        android:layout_height=&quot;wrap_content&quot;
        android:layout_marginTop=&quot;16dp&quot;
        android:layout_marginLeft=&quot;4dp&quot;
        android:layout_marginRight=&quot;4dp&quot;
        android:layout_marginBottom=&quot;4dp&quot;
        android:hint=&quot;@string/username&quot; /&gt;
    &lt;EditText
        android:id=&quot;@+id/password&quot;
        android:inputType=&quot;textPassword&quot;
        android:layout_width=&quot;match_parent&quot;
        android:layout_height=&quot;wrap_content&quot;
        android:layout_marginTop=&quot;4dp&quot;
        android:layout_marginLeft=&quot;4dp&quot;
        android:layout_marginRight=&quot;4dp&quot;
        android:layout_marginBottom=&quot;16dp&quot;
        android:fontFamily=&quot;sans-serif&quot;
        android:hint=&quot;@string/password&quot;/&gt;
&lt;/LinearLayout&gt;</codebox><codebox char_offset="771" frame_height="200" frame_width="800" highlight_brackets="False" show_line_numbers="False" syntax_highlighting="java" width_in_pixels="True">@Override
public Dialog onCreateDialog(Bundle savedInstanceState) {
    AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
    // Get the layout inflater
    LayoutInflater inflater = getActivity().getLayoutInflater();

    // Inflate and set the layout for the dialog
    // Pass null as the parent view because its going in the dialog layout
    builder.setView(inflater.inflate(R.layout.dialog_signin, null))
    // Add action buttons
           .setPositiveButton(R.string.signin, new DialogInterface.OnClickListener() {
               @Override
               public void onClick(DialogInterface dialog, int id) {
                   // sign in the user ...
               }
           })
           .setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
               public void onClick(DialogInterface dialog, int id) {
                   LoginDialogFragment.this.getDialog().cancel();
               }
           });      
    return builder.create();
}</codebox><codebox char_offset="1031" frame_height="200" frame_width="800" highlight_brackets="False" show_line_numbers="False" syntax_highlighting="java" width_in_pixels="True">public class NoticeDialogFragment extends DialogFragment {
    
    /* The activity that creates an instance of this dialog fragment must
     * implement this interface in order to receive event callbacks.
     * Each method passes the DialogFragment in case the host needs to query it. */
    public interface NoticeDialogListener {
        public void onDialogPositiveClick(DialogFragment dialog);
        public void onDialogNegativeClick(DialogFragment dialog);
    }
    
    // Use this instance of the interface to deliver action events
    NoticeDialogListener mListener;
    
    // Override the Fragment.onAttach() method to instantiate the NoticeDialogListener
    @Override
    public void onAttach(Activity activity) {
        super.onAttach(activity);
        // Verify that the host activity implements the callback interface
        try {
            // Instantiate the NoticeDialogListener so we can send events to the host
            mListener = (NoticeDialogListener) activity;
        } catch (ClassCastException e) {
            // The activity doesn't implement the interface, throw exception
            throw new ClassCastException(activity.toString()
                    + &quot; must implement NoticeDialogListener&quot;);
        }
    }
    @Override
    public Dialog onCreateDialog(Bundle savedInstanceState) {
        // Build the dialog and set up the button click handlers
        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
        builder.setMessage(&quot;try&quot;)
               .setPositiveButton(&quot;fire&quot;, new DialogInterface.OnClickListener() {
                   public void onClick(DialogInterface dialog, int id) {
                       // Send the positive button event back to the host activity
                       mListener.onDialogPositiveClick(NoticeDialogFragment.this);
                   }
               })
               .setNegativeButton(&quot;cancel&quot;, new DialogInterface.OnClickListener() {
                   public void onClick(DialogInterface dialog, int id) {
                       // Send the negative button event back to the host activity
                       mListener.onDialogPositiveClick(NoticeDialogFragment.this);
                   }
               });
        return builder.create();
    }
}
</codebox><codebox char_offset="1038" frame_height="200" frame_width="800" highlight_brackets="False" show_line_numbers="False" syntax_highlighting="java" width_in_pixels="True">public class StudyView extends FragmentActivity implements NoticeDialogFragment.NoticeDialogListener{
	EditText mText;
	public void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);
		mText=(EditText)findViewById(R.id.editText);
		//EditText editText=(EditText)findViewById(R.id.editText);
		//Button button=(Button)findViewById(R.id.bn01);
//		FireMissilesDialogFragment showsDialog=new FireMissilesDialogFragment();
//		showsDialog.show(getFragmentManager(), &quot;fires&quot;);
		showNoticeDialog();
	}
	
	 public void showNoticeDialog() {
	        // Create an instance of the dialog fragment and show it
	        DialogFragment dialog = new NoticeDialogFragment();
	        dialog.show(getFragmentManager(), &quot;NoticeDialogFragment&quot;);
	    }
	@Override
	public void onDialogPositiveClick(DialogFragment dialog) {
		mText.setBackgroundColor(Color.BLUE);
	}

	@Override
	public void onDialogNegativeClick(DialogFragment dialog) {
		
	}

}</codebox></node></cherrytree>