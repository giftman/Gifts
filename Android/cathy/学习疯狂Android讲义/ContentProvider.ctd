<?xml version="1.0" ?><cherrytree><node name="ContentProvider" prog_lang="custom-colors" readonly="False" tags="CrazyAndroid" unique_id="1"><rich_text></rich_text><node name="使用系统的ContentProvider" prog_lang="custom-colors" readonly="False" tags="contentProvider" unique_id="2"><rich_text>用contentProvider可以取得你想要的一切……也可以写入一切，只是类型复杂点，因为要准确……
两步－－
一　调用Activity的getContentResolver()获取ContentResolver对象
二　根据需要调用ContentResolver的insert(),delete(),update()和query方法操作数据即可

要操作系统的contentProvider,只要知道它的ＵＲＩ：就像只要知道一个人的地址。

</rich_text><rich_text foreground="#ffff00000000" scale="h1">查！</rich_text><rich_text>更有趣的是，它可以在遍历的基础上再细查.
第一次cursor遍历所有联系人，在每一次联系人的基础上再遍历他下面的电话个数。

    final ArrayList&lt;String&gt; names=new ArrayList&lt;String&gt;();
				final ArrayList&lt;ArrayList&lt;String&gt;&gt; details = new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
				// 定义两个List来封装系统的联系人信息、指定联系人的电话号码、Email等详情
				 
					Cursor cursor=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
					</rich_text><rich_text foreground="#a0a02020f0f0">while(cursor.moveToNext())</rich_text><rich_text>
					{
						String contactId=cursor.getString(cursor.getColumnIndex(ContactsContract.Contacts._ID));
						String name=cursor.getString(cursor.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME));
						names.add(name);
						Cursor phones= getContentResolver().query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI, null, </rich_text><rich_text foreground="#00000000ffff">ContactsContract.CommonDataKinds.Phone.CONTACT_ID+&quot;=&quot;+contactId</rich_text><rich_text>, null, null);
						ArrayList&lt;String&gt; detail=new ArrayList&lt;String&gt;();
						</rich_text><rich_text foreground="#00000000ffff">while(phones.moveToNext()){</rich_text><rich_text>
							String phoneNumber=phones.getString(phones.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));
							detail.add(phoneNumber);
						}
						phones.close();
						details.add(detail);
					}
					cursor.close();

上面这段代码读完我的通讯录是这样的：
[hong1228@163.com, eric.man@yahoo.com, eric.an@yahoo.com.cn, 师兄， ……，null]
[[], [], [], [633319], [130346, 130346], [662540], ……，[]]

本例子中是用ExpandableListView显示出来，或者说你现在得到两组这样的数据，如何显示，ExpandableListView可以较好地显示－－

</rich_text><rich_text foreground="#ffff00000000" scale="h1">写！</rich_text><rich_text>插入数据犹如走流程……明白了也就那么一回事，越复杂越是细致。

我们要做的其实只是一句：
getContentResolver().insert(android.provider.ContactsContract.Data.CONTENT_URI,values);
Uri  我们知道了,现在要准备values
分三步：
                values.put(Data.RAW_CONTACT_ID, rawContactId); 
				// 设置内容类型
				values.put(Data.MIMETYPE, StructuredName.CONTENT_ITEM_TYPE);
				// 设置联系人名字
				values.put(StructuredName.GIVEN_NAME, name);

rawContactId即是你要在那个空的Id上插入这些数据……所以还要先把这个找出来。
                    ContentValues values = new ContentValues();
				// 向RawContacts.CONTENT_URI执行一个空值插入，
				// 目的是获取系统返回的rawContactId 
				Uri rawContactUri = getContentResolver()
					.insert(RawContacts.CONTENT_URI, values);
				long rawContactId = ContentUris.parseId(rawContactUri);
rawContactUri（content://com.android.contacts/raw_contacts/870）
rawContactId（870）

更离谱的是插入电话号码这些都要重新来一次
values.clear();
				values.put(Data.RAW_CONTACT_ID, rawContactId);
				values.put(Data.MIMETYPE, Phone.CONTENT_ITEM_TYPE);
				// 设置联系人的电话号码
				values.put(Phone.NUMBER, phone);
				// 设置电话类型
				values.put(Phone.TYPE, Phone.TYPE_MOBILE);
				// 向联系人电话号码URI添加电话号码
				getContentResolver().insert(
					android.provider.ContactsContract.Data.CONTENT_URI, values);


这次例子的完整代码：
</rich_text><rich_text justification="left"></rich_text><rich_text>


</rich_text><codebox char_offset="2771" frame_height="200" frame_width="700" highlight_brackets="False" show_line_numbers="False" syntax_highlighting="java" width_in_pixels="True">public class ContactProviderTest extends Activity
{
	Button search;
	Button add;
	@Override
	public void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);
		// 获取系统界面中查找、添加两个按钮
		search = (Button) findViewById(R.id.search);
		add = (Button) findViewById(R.id.add);
		search.setOnClickListener(new OnClickListener()
		{
			@Override
			public void onClick(View source)
			{
				// 定义两个List来封装系统的联系人信息、指定联系人的电话号码、Email等详情
				final ArrayList&lt;String&gt; names = new ArrayList&lt;String&gt;();
				final ArrayList&lt;ArrayList&lt;String&gt;&gt; details
					= new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
				// 使用ContentResolver查找联系人数据
				Cursor cursor = getContentResolver().query(
					ContactsContract.Contacts.CONTENT_URI
					, null, null, null, null);				
				// 遍历查询结果，获取系统中所有联系人
				while (cursor.moveToNext())
				{
					// 获取联系人ID
					String contactId = cursor.getString(cursor
						.getColumnIndex(ContactsContract.Contacts._ID));
					// 获取联系人的名字
					String name = cursor.getString(cursor
						.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME));
					names.add(name);
					// 使用ContentResolver查找联系人的电话号码
					Cursor phones = getContentResolver().query(
						ContactsContract.CommonDataKinds.Phone.CONTENT_URI,
						null,
						ContactsContract.CommonDataKinds.Phone.CONTACT_ID 
							+ &quot; = &quot; + contactId, null, null);
					ArrayList&lt;String&gt; detail = new ArrayList&lt;String&gt;();
					// 遍历查询结果，获取该联系人的多个电话号码
					while (phones.moveToNext())
					{
						// 获取查询结果中电话号码列中数据。
						String phoneNumber = phones
							.getString(phones
							.getColumnIndex(ContactsContract
							.CommonDataKinds.Phone.NUMBER));
						detail.add(&quot;电话号码：&quot; + phoneNumber); 
					}
					phones.close();
					// 使用ContentResolver查找联系人的Email地址
					Cursor emails = getContentResolver().query(
						ContactsContract.CommonDataKinds.Email.CONTENT_URI,
						null,
						ContactsContract.CommonDataKinds.Email.CONTACT_ID 
							+ &quot; = &quot; + contactId, null, null);
					// 遍历查询结果，获取该联系人的多个Email地址
					while (emails.moveToNext())
					{
						// 获取查询结果中Email地址列中数据。
						String emailAddress = emails
							.getString(emails
							.getColumnIndex(ContactsContract
							.CommonDataKinds.Email.DATA));
						detail.add(&quot;邮件地址：&quot; + emailAddress); 
					}
					emails.close();
					details.add(detail);
				}
				cursor.close();
				//加载result.xml界面布局代表的视图
				View resultDialog = getLayoutInflater().inflate(
					R.layout.result, null);	
				// 获取resultDialog中ID为list的ExpandableListView
				ExpandableListView list = (ExpandableListView)resultDialog
					.findViewById(R.id.list);
				//创建一个ExpandableListAdapter对象
				ExpandableListAdapter adapter = new BaseExpandableListAdapter()
				{
					//获取指定组位置、指定子列表项处的子列表项数据
					@Override
					public Object getChild(int groupPosition, int childPosition)
					{
						return details.get(groupPosition).get(childPosition);
					}
					@Override
					public long getChildId(int groupPosition, int childPosition)
					{
						return childPosition;
					}
					@Override
					public int getChildrenCount(int groupPosition)
					{
						return details.get(groupPosition).size();
					}
					private TextView getTextView()
					{
						AbsListView.LayoutParams lp = new AbsListView.LayoutParams(
								ViewGroup.LayoutParams.FILL_PARENT, 64);
						TextView textView = new TextView(ContactProviderTest.this);
						textView.setLayoutParams(lp);
						textView.setGravity(Gravity.CENTER_VERTICAL | Gravity.LEFT);
						textView.setPadding(36, 0, 0, 0);
						textView.setTextSize(20);
						return textView;
					}
					// 该方法决定每个子选项的外观
					@Override
					public View getChildView(int groupPosition, int childPosition,
							boolean isLastChild, View convertView, ViewGroup parent)
					{
						TextView textView = getTextView();	
						textView.setText(getChild(groupPosition, childPosition).toString());
						return textView;
					}
					//获取指定组位置处的组数据
					@Override
					public Object getGroup(int groupPosition)
					{
						return names.get(groupPosition);
					}
					@Override
					public int getGroupCount()
					{
						return names.size();
					}
					@Override
					public long getGroupId(int groupPosition)
					{
						return groupPosition;
					}
					//该方法决定每个组选项的外观
					@Override
					public View getGroupView(int groupPosition, boolean isExpanded,
							View convertView, ViewGroup parent)
					{
						TextView textView = getTextView();
						textView.setText(getGroup(groupPosition).toString());
						return textView;
					}
					@Override
					public boolean isChildSelectable(int groupPosition, int childPosition)
					{
						return true;
					}
					@Override
					public boolean hasStableIds()
					{
						return true;
					}
				};
				// 为ExpandableListView设置Adapter对象
				list.setAdapter(adapter);
				// 使用对话框来显示查询结果。
				new AlertDialog.Builder(ContactProviderTest.this)
					.setView(resultDialog)
					.setPositiveButton(&quot;确定&quot; , null)
					.show();				
			}
		});
		// 为add按钮的单击事件绑定监听器
		add.setOnClickListener(new OnClickListener()
		{
			@Override
			public void onClick(View v)
			{
				// 获取程序界面中的3个文本框
				String name = ((EditText)findViewById(R.id.name))
					.getText().toString();
				String phone = ((EditText)findViewById(R.id.phone))
					.getText().toString();
				String email = ((EditText)findViewById(R.id.email))
					.getText().toString();
				// 创建一个空的ContentValues
				ContentValues values = new ContentValues();
				// 向RawContacts.CONTENT_URI执行一个空值插入，
				// 目的是获取系统返回的rawContactId 
				Uri rawContactUri = getContentResolver()
					.insert(RawContacts.CONTENT_URI, values);
				long rawContactId = ContentUris.parseId(rawContactUri);
				values.clear();
				values.put(Data.RAW_CONTACT_ID, rawContactId); 
				// 设置内容类型
				values.put(Data.MIMETYPE, StructuredName.CONTENT_ITEM_TYPE);
				// 设置联系人名字
				values.put(StructuredName.GIVEN_NAME, name);
				// 向联系人URI添加联系人名字
				getContentResolver().insert(
					android.provider.ContactsContract.Data.CONTENT_URI, values);
				values.clear();
				values.put(Data.RAW_CONTACT_ID, rawContactId);
				values.put(Data.MIMETYPE, Phone.CONTENT_ITEM_TYPE);
				// 设置联系人的电话号码
				values.put(Phone.NUMBER, phone);
				// 设置电话类型
				values.put(Phone.TYPE, Phone.TYPE_MOBILE);
				// 向联系人电话号码URI添加电话号码
				getContentResolver().insert(
					android.provider.ContactsContract.Data.CONTENT_URI, values);
				values.clear();
				values.put(Data.RAW_CONTACT_ID, rawContactId);
				values.put(Data.MIMETYPE, Email.CONTENT_ITEM_TYPE);
				// 设置联系人的Email地址
				values.put(Email.DATA, email);
				// 设置该电子邮件的类型
				values.put(Email.TYPE, Email.TYPE_WORK);
				// 向联系人Email URI添加Email数据
				getContentResolver().insert(
					android.provider.ContactsContract.Data.CONTENT_URI, values);
				Toast.makeText(ContactProviderTest.this
					, &quot;联系人数据添加成功&quot; , 8000)
					.show();
			}
		});
	}
}</codebox></node><node name="使用ContentProvider管理多媒体内容" prog_lang="custom-colors" readonly="False" tags="contentProvider" unique_id="3"><rich_text>[/mnt/sdcard/.adc/AdColonyCloseNormal.png, null, null, null, null, null, null, null, null, null, null, null]

[/mnt/sdcard/.adc/AdColonyCloseNormal.png, /mnt/sdcard/.adc/AdColonyClosePushed.png, /mnt/sdcard/.adc/AdColonyWebBackNormal.png, /mnt/sdcard/.adc/AdColonyWebBackPushed.png, /mnt/sdcard/.adc/AdColonyWebForwardNormal.png, /mnt/sdcard/.adc/AdColonyWebForwardPushed.png, /mnt/sdcard/you...
我晕，将全部ＳＤ卡里面全部图片都显示出来了……
只要它是图片－－都找到
只要它是图片就有该有的信息
</rich_text><rich_text foreground="#ffff00000000" scale="h2">查询</rich_text><rich_text>
只要有信息，我还显示不出你来吗？
image.setImageBitmap(BitmapFactory.decodeFile(fileName.get(position)));
</rich_text><rich_text foreground="#ffff00000000">关键代码：</rich_text><rich_text>
                Cursor cursor = getContentResolver()
					.query(Media.EXTERNAL_CONTENT_URI
					, null ,null , null , null);
				while(cursor.moveToNext())
				{
					// 获取图片的显示名
					String name = cursor.getString(cursor
						.getColumnIndex(Media.DISPLAY_NAME));
					// 获取图片的详细描述
					String desc = cursor.getString(cursor
						.getColumnIndex(Media.DESCRIPTION));
					// 获取图片的保存位置的数据
					byte[] data = cursor.getBlob(cursor
						.getColumnIndex(Media.DATA));					
					// 将图片名添加到names集合中
					names.add(name);
					// 将图片描述添加到descs集合中
					descs.add(desc);
					// 将图片保存路径添加到fileNames集合中
					fileNames.add(new String(data , 0 , data.length - 1));
				}


</rich_text><rich_text foreground="#ffff00000000" scale="h2">插入</rich_text><rich_text>：
要经过outputStream还有bitmap.compress....

</rich_text><rich_text justification="left"></rich_text><rich_text>

注意下这个：要这样拿地址串
byte[] data = cursor.getBlob(cursor.getColumnIndex(Media.DATA));
fileNames.add(new String(data,0,data.length-1));
</rich_text><rich_text scale="h2">现在要有个好的图片浏览器，可以拖大缩小的……</rich_text><codebox char_offset="1252" frame_height="200" frame_width="700" highlight_brackets="False" show_line_numbers="False" syntax_highlighting="java" width_in_pixels="True">Activity
{
	Button add;
	Button view;
	ListView show;
	ArrayList&lt;String&gt; names = new ArrayList&lt;String&gt;();
	ArrayList&lt;String&gt; descs = new ArrayList&lt;String&gt;();
	ArrayList&lt;String&gt; fileNames = new ArrayList&lt;String&gt;();	
	@Override
	public void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);
		add = (Button) findViewById(R.id.add);
		view = (Button) findViewById(R.id.view);
		show = (ListView) findViewById(R.id.show);
		// 为add按钮的单击事件绑定监听器
		add.setOnClickListener(new OnClickListener()
		{
			@Override
			public void onClick(View v)
			{
				// 创建ContentValues对象，准备插入数据
				ContentValues values = new ContentValues();
				values.put(Media.DISPLAY_NAME , &quot;jinta&quot;);
				values.put(Media.DESCRIPTION , &quot;金塔&quot;);
				values.put(Media.MIME_TYPE , &quot;image/jpeg&quot;);
				// 插入数据，返回所插入数据对应的Uri
				Uri uri = getContentResolver().insert(Media.EXTERNAL_CONTENT_URI ,values);
				//加载应用程序下的jinta图片
				Bitmap bitmap = BitmapFactory.decodeResource(
					MainActivity.this.getResources()
					, R.drawable.jinta);
				OutputStream os = null;
				try
				{
					// 获取刚插入的数据的Uri对应的输出流
					os = getContentResolver().openOutputStream(uri);
					// 将bitmap图片保存到Uri对应的数据节点中
					bitmap.compress(Bitmap.CompressFormat.JPEG, 100, os);
					os.close();
				}
				catch (IOException e)
				{
					e.printStackTrace();
				}
			}
		});
		// 为view按钮的单击事件绑定监听器
		view.setOnClickListener(new OnClickListener()
		{
			@Override
			public void onClick(View v)
			{
				//清空names、descs、fileNames集合里原有的数据。
				names.clear();
				descs.clear();
				fileNames.clear();
				// 通过ContentResolver查询所有图片信息
				Cursor cursor = getContentResolver()
					.query(Media.EXTERNAL_CONTENT_URI
					, null ,null , null , null);
				while(cursor.moveToNext())
				{
					// 获取图片的显示名
					String name = cursor.getString(cursor
						.getColumnIndex(Media.DISPLAY_NAME));
					// 获取图片的详细描述
					String desc = cursor.getString(cursor
						.getColumnIndex(Media.DESCRIPTION));
					// 获取图片的保存位置的数据
					byte[] data = cursor.getBlob(cursor
						.getColumnIndex(Media.DATA));					
					// 将图片名添加到names集合中
					names.add(name);
					// 将图片描述添加到descs集合中
					descs.add(desc);
					// 将图片保存路径添加到fileNames集合中
					fileNames.add(new String(data , 0 , data.length - 1));
				}
				// 创建一个List集合，List集合的元素是Map
				List&lt;Map&lt;String, Object&gt;&gt; listItems
					= new ArrayList&lt;Map&lt;String, Object&gt;&gt;();
				// 将names、descs两个集合对象的数据转换到Map集合中
				for (int i = 0; i &lt; names.size(); i++)
				{
					Map&lt;String, Object&gt; listItem = new HashMap&lt;String, Object&gt;();
					listItem.put(&quot;name&quot;, names.get(i));
					listItem.put(&quot;desc&quot;, descs.get(i));
					listItems.add(listItem);
				}
				//创建一个SimpleAdapter
				SimpleAdapter simpleAdapter = new SimpleAdapter(
						MainActivity.this
					, listItems 
					, R.layout.line
					, new String[]{ &quot;name&quot;, &quot;desc&quot; }
					, new int[]{R.id.name , R.id.desc});
				// 为show ListView组件设置Adapter
				show.setAdapter(simpleAdapter);
			}
		});
		//为show ListView的列表项单击事件添加监听器
		show.setOnItemClickListener(new OnItemClickListener()
		{
			@Override
			public void onItemClick(AdapterView&lt;?&gt; parent, View source
				, int position, long id)
			{
				//加载view.xml界面布局代表的视图
				View viewDialog = getLayoutInflater().inflate(
					R.layout.view, null);
				// 获取viewDialog中ID为image的组件
				ImageView image = (ImageView) viewDialog
					.findViewById(R.id.image);
				// 设置image显示指定图片
				image.setImageBitmap(BitmapFactory
					.decodeFile(fileNames.get(position)));
				// 使用对话框显示用户单击的图片
				new AlertDialog.Builder(MainActivity.this)
					.setView(viewDialog)
					.setPositiveButton(&quot;确定&quot;,null)
					.show();				
			}
		});
	}
}</codebox></node><node name="创建ContentProvider" prog_lang="custom-colors" readonly="False" tags="contentProvider" unique_id="4"><rich_text>１　开发一个ContentProvider的子类，该子类需要实现增、删、改、查等方法
２　在AndroidManifest.xml文件中注册该ContentProvider.

用的时候真的不需要特别声明实例之类，看来真的你知道uri，他就是你的了……

提供工具类</rich_text><rich_text scale="h2">UriMatcher</rich_text><rich_text>帮助你更好地操作Uri

addURI 增加注册Uri

match　判断有无ID...

还有个</rich_text><rich_text scale="h2">ContentUris</rich_text><rich_text>
withappendedId  为路径自动加上id
parseId:将id从uri中取出来　（相煎何太急呢?)


开始创建：
１　提供工具类word，即是将常量放在这里方便取。
２　实现Provider..
3 注册，这里的 authorities　要与uri里面的一致，切记！

具体看代码，</rich_text><rich_text foreground="#ffff00000000">其中数据表究竟是怎么存储数据的，对有id的代码处理还要更进一步理解。</rich_text><rich_text>

</rich_text><rich_text justification="left"></rich_text><codebox char_offset="388" frame_height="200" frame_width="700" highlight_brackets="False" show_line_numbers="False" syntax_highlighting="java" width_in_pixels="True">public class DictProvider extends ContentProvider
{
	private static UriMatcher matcher
		= new UriMatcher(UriMatcher.NO_MATCH);
	private static final int WORDS = 1;
	private static final int WORD = 2;
	private MyDatabaseHelper dbOpenHelper;
	static
	{
		// 为UriMatcher注册两个Uri
		matcher.addURI(Words.AUTHORITY, &quot;words&quot;, WORDS);
		matcher.addURI(Words.AUTHORITY, &quot;word/#&quot;, WORD);
	}
	// 第一次调用该DictProvider时，系统先创建DictProvider对象，并回调该方法
	@Override
	public boolean onCreate()
	{
		dbOpenHelper = new MyDatabaseHelper(this.getContext(), &quot;myDict.db3&quot;, 1);
		return true;
	}
	// 插入数据方法
	@Override
	public Uri insert(Uri uri, ContentValues values)
	{
		// 获得数据库实例
		SQLiteDatabase db = dbOpenHelper.getReadableDatabase();
		// 插入数据，返回行ID
		long rowId = db.insert(&quot;dict&quot;, Words.Word._ID, values);
		// 如果插入成功返回uri
		if (rowId &gt; 0)
		{
			// 在已有的 Uri的后面追加ID数据
			Uri wordUri = ContentUris.withAppendedId(uri, rowId);
			// 通知数据已经改变
			getContext().getContentResolver().notifyChange(wordUri, null);
			return wordUri;
		}
		return null;
	}
	// 删除数据的方法
	@Override
	public int delete(Uri uri, String selection, String[] selectionArgs)
	{
		SQLiteDatabase db = dbOpenHelper.getReadableDatabase();
		// 记录所删除的记录数
		int num = 0;
		// 对于uri进行匹配。
		switch (matcher.match(uri))
		{
			case WORDS:
				num = db.delete(&quot;dict&quot;, selection, selectionArgs);
				break;
			case WORD:
				// 解析出所需要删除的记录ID
				long id = ContentUris.parseId(uri);
				String where = Words.Word._ID + &quot;=&quot; + id;
				// 如果原来的where子句存在，拼接where子句
				if (selection != null &amp;&amp; !selection.equals(&quot;&quot;))
				{
					where = where + &quot; and &quot; + selection;
				}
				num = db.delete(&quot;dict&quot;, where, selectionArgs);
				break;
			default:
				throw new IllegalArgumentException(&quot;未知Uri:&quot; + uri);
		}
		// 通知数据已经改变
		getContext().getContentResolver().notifyChange(uri, null);
		return num;
	}
	// 修改数据的方法
	@Override
	public int update(Uri uri, ContentValues values, String selection,
		String[] selectionArgs)
	{
		SQLiteDatabase db = dbOpenHelper.getWritableDatabase();
		// 记录所修改的记录数
		int num = 0;
		switch (matcher.match(uri))
		{
			case WORDS:
				num = db.update(&quot;dict&quot;, values, selection, selectionArgs);
				break;
			case WORD:
				// 解析出想修改的记录ID
				long id = ContentUris.parseId(uri);
				String where = Words.Word._ID + &quot;=&quot; + id;
				// 如果原来的where子句存在，拼接where子句
				if (selection != null &amp;&amp; !selection.equals(&quot;&quot;))
				{
					where = where + &quot; and &quot; + selection;
				}
				num = db.update(&quot;dict&quot;, values, where, selectionArgs);
				break;
			default:
				throw new IllegalArgumentException(&quot;未知Uri:&quot; + uri);
		}
		// 通知数据已经改变
		getContext().getContentResolver().notifyChange(uri, null);
		return num;
	}
	// 查询数据的方法
	@Override
	public Cursor query(Uri uri, String[] projection, String selection,
		String[] selectionArgs, String sortOrder)
	{
		SQLiteDatabase db = dbOpenHelper.getReadableDatabase();
		switch (matcher.match(uri))
		{
			case WORDS:
				// 执行查询
				return db.query(&quot;dict&quot;, projection, selection, selectionArgs,
					null, null, sortOrder);
			case WORD:
				// 解析出想查询的记录ID
				long id = ContentUris.parseId(uri);
				String where = Words.Word._ID + &quot;=&quot; + id;
				// 如果原来的where子句存在，拼接where子句
				if (selection != null &amp;&amp; !&quot;&quot;.equals(selection))
				{
					where = where + &quot; and &quot; + selection;
				}
				return db.query(&quot;dict&quot;, projection, where, selectionArgs, null,
					null, sortOrder);
			default:
				throw new IllegalArgumentException(&quot;未知Uri:&quot; + uri);
		}
	}
	// 返回指定uri参数对应的数据的MIME类型
	@Override
	public String getType(Uri uri)
	{
		switch (matcher.match(uri))
		{
			// 如果操作的数据是多项记录
			case WORDS:
				return &quot;vnd.android.cursor.dir/org.crazyit.dict&quot;;
				// 如果操作的数据是单项记录
			case WORD:
				return &quot;vnd.android.cursor.item/org.crazyit.dict&quot;;
			default:
				throw new IllegalArgumentException(&quot;未知Uri:&quot; + uri);
		}
	}
}</codebox></node><node name="监听（ContentObserver)" prog_lang="custom-colors" readonly="False" tags="contentProvider" unique_id="5"><rich_text>
getContext().getContentResolver().notifyChange(uri,null);

为了在应用中监听ContentProvider数据的改变，需要利用Android提供的  ContentObserver基类；

注册方法很简单：

getContentResolver().registerContentObserver(Uri.parse(&quot;content://sms&quot;),true,new SmsObserver(new Handler()));

uri：
notifyForDescendents:true?目录下的改变都关你事：只是它改变才关你事
observer:ContentObserver


你要实现一个ContentObserver类
重写onChange方法就可以了</rich_text></node></node></cherrytree>