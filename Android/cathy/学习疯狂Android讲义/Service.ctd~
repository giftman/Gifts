<?xml version="1.0" ?><cherrytree><node name="Service" prog_lang="custom-colors" readonly="False" tags="CrazyAndroid" unique_id="1"><rich_text></rich_text><node name="简介" prog_lang="custom-colors" readonly="False" tags="Service" unique_id="2"><rich_text>Service 一直在后台运载，它没有用户界面，所以绝不会到前台来。

Android系统本身提供了大量的Service组件，开发者可通过这些系统Service来操作Android系统本身。

他们的生命周期：

onCreate
onStart
onDestroy


bindService():
onCreate
onStart
onBind
onUnbind
onDestroy
</rich_text><node name="startService" prog_lang="custom-colors" readonly="False" tags="Service" unique_id="3"><rich_text></rich_text></node><node name="BindService" prog_lang="custom-colors" readonly="False" tags="Service" unique_id="4"><rich_text justification="left"></rich_text><rich_text>

 bindService(intent, conn, Service.BIND_AUTO_CREATE);
 
 
 conn更像是传信者，Binder没是信的载体</rich_text><codebox char_offset="0" frame_height="200" frame_width="700" highlight_brackets="False" show_line_numbers="False" syntax_highlighting="java" width_in_pixels="True">public class BindService extends Service{
	private int count;
	private boolean quit;
	public MyBinder binder = new MyBinder();
	
	public class MyBinder extends Binder{
		public int getCount(){
			return count;
		}
	}
	@Override
	public IBinder onBind(Intent arg0) {
		System.out.println(&quot;Service is Binded&quot;);
		return binder;
	}
	
	@Override
	public void onCreate() {
		// TODO Auto-generated method stub
		super.onCreate();
		System.out.println(&quot;Service is onCreate&quot;);
		new Thread(){
			public void run() {
				while(!quit){
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						// TODO: handle exception
					}
					count++;
				}
			};
		}.start();
	}
	
	@Override
	public void onDestroy() {
		// TODO Auto-generated method stub
		super.onDestroy(); 
		this.quit=true;
		System.out.println(&quot;Service is Destroyed&quot;);
	}
	
	@Override
	public boolean onUnbind(Intent intent) {
		System.out.println(&quot;Service is Unbinded&quot;);
		return true;
	}
}
</codebox></node></node><node name="跨进程调用Service(AIDL服务)" prog_lang="custom-colors" readonly="False" tags="Service" unique_id="5"><rich_text></rich_text><node name="创建AIDL" prog_lang="custom-colors" readonly="False" tags="Service" unique_id="6"><rich_text>aidl结尾

package com.service;
interface ICat
{
	String getColor();
	double getWeight();
}


ADT工具会自动在gen/org/crazyit/service下生成一个ICat.java接口，在该接口里包含一个</rich_text><rich_text foreground="#00000000ffff">Stub</rich_text><rich_text>内部类。
</rich_text></node><node name="Service" prog_lang="custom-colors" readonly="False" tags="Service" unique_id="8"><rich_text>Service的onBind()方法所返回的IBinder对象应该是ADT所生成的ICat.Stub的子类的实例。其它部分，则与开发本地Service完全一样。

public　class CatBinder extends Stub
{   }


开发AIDL远程Service其实也很简单，只是需要比开发本地Service多定义一个AIDL接口而已。
   
如果你想传多一些信息，你就在Service类中增加多些成员变量，然后在Binder方法里面交给它……</rich_text></node><node name="客户端" prog_lang="custom-colors" readonly="False" tags="Service" unique_id="7"><rich_text>一、和本地一样，要先创建ServiceConnection

二、在onServiceConnected里面取得Binder（这里是它的子类stub)

然后有了就可以用它的方法取得你想要的数据啦</rich_text></node></node><node name="传递复杂数据的AIDL服务" prog_lang="custom-colors" readonly="False" tags="Service" unique_id="9"><rich_text></rich_text><node name="Parcelabel" prog_lang="custom-colors" readonly="False" tags="Service" unique_id="10"><rich_text>Ｐracelable接口是一种效率更高的序列化接口，要实现它。

实现其必要的接口：

1 describeContent
2 writeToParcel
3 添加一个静态成员，名为CREATOR, yynw cfqj pugm b Ｐarcelable.Ｃreator接口

</rich_text><rich_text foreground="#ffff00000000" scale="h2">引用包也要用分号结尾</rich_text><rich_text>。。。

Person.java 
</rich_text><rich_text justification="left"></rich_text><rich_text>
Person.aidl  (要实现Parcelable接口不仅要求实现该接口里定义的方法，而且要求在实现类中定义一个名为CREATOR、类型为Parcelable.Creator的静态Field。险些之外，还要求使用</rich_text><rich_text foreground="#00000000ffff">AIDL代码来定义这些自定义类型。</rich_text><rich_text>)
parcelable Person;


</rich_text><codebox char_offset="167" frame_height="200" frame_width="700" highlight_brackets="False" show_line_numbers="False" syntax_highlighting="java" width_in_pixels="True">package com.complexservice;

import android.os.Parcel;
import android.os.Parcelable;

public class Person implements Parcelable{
	private Integer id;
	private String name;
	private String pass;
	
	
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		result = prime * result + ((pass == null) ? 0 : pass.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Person other = (Person) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		if (pass == null) {
			if (other.pass != null)
				return false;
		} else if (!pass.equals(other.pass))
			return false;
		return true;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getPass() {
		return pass;
	}

	public void setPass(String pass) {
		this.pass = pass;
	}

	public Person(Integer id, String name, String pass) {
		super();
		this.id = id;
		this.name = name;
		this.pass = pass;
	}

	public Person() {
		super();
	}

	@Override
	public int describeContents() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeInt(id);
		dest.writeString(name);
		dest.writeString(pass);
	}
	
	public static final Parcelable.Creator&lt;Person&gt; CREATOR
	  	= new Creator&lt;Person&gt;() {
			
			@Override
			public Person[] newArray(int size) {
				// TODO Auto-generated method stub
				return new Person[size];
			}
			
			@Override
			public Person createFromParcel(Parcel source) {
				// TODO Auto-generated method stub
				return new Person(source.readInt(),source.readString(),source.readString());
			}
		};
}
</codebox></node></node><node name="getSystemService" prog_lang="custom-colors" readonly="False" tags="Service" unique_id="11"><rich_text></rich_text><node name="TelephonyManager" prog_lang="custom-colors" readonly="False" tags="Service" unique_id="12"><rich_text>跳过了P396</rich_text></node><node name="SmsManager(Important)" prog_lang="custom-colors" readonly="False" tags="Service" unique_id="13"><rich_text>重点学习：

</rich_text></node><node name="AudioManager" prog_lang="custom-colors" readonly="False" tags="Service" unique_id="14"><rich_text>获取AudioManager对象之后，就可以用它的方法控制手机音频，基本概括了日常应用：
    　adjustStreamVolume()
    　setMicrophoneMute()
    　setMode()
    　setRingerMode()
    　setSpeakerphonen()
    　setStreamMute
    　setStreamVolume
    　
    　</rich_text><rich_text justification="left"></rich_text><codebox char_offset="207" frame_height="200" frame_width="700" highlight_brackets="False" show_line_numbers="False" syntax_highlighting="java" width_in_pixels="True">public class SendSms extends Activity
{
	Button play, up , down;
	ToggleButton mute;
	AudioManager aManager;
	@Override
	public void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);
		// 获取系统的音频服务
		aManager = (AudioManager)getSystemService(
			Service.AUDIO_SERVICE);
		// 获取界面中3个按钮和一个ToggleButton控件
		play = (Button) findViewById(R.id.play);
		up = (Button) findViewById(R.id.up);
		down = (Button) findViewById(R.id.down);
		mute = (ToggleButton) findViewById(R.id.mute);
		// 为play按钮的单击事件绑定监听器
		play.setOnClickListener(new OnClickListener()
		{
			@Override
			public void onClick(View source)
			{
				// 初始化MediaPlayer对象，准备播放音乐
				MediaPlayer mPlayer = MediaPlayer.create(SendSms.this,
					R.raw.bomb);
				// 设置循环播放
				mPlayer.setLooping(true);
				// 开始播放
				mPlayer.start();
			}
		});

		up.setOnClickListener(new OnClickListener()
		{
			@Override
			public void onClick(View source)
			{
				// 指定调节音乐的音频，增大音量，而且显示音量图形示意
				aManager.adjustStreamVolume(
					AudioManager.STREAM_MUSIC
					, AudioManager.ADJUST_RAISE
					, AudioManager.FLAG_SHOW_UI);
			}
		});
		down.setOnClickListener(new OnClickListener()
		{
			@Override
			public void onClick(View source)
			{
				// 指定调节音乐的音频，降低音量，而且显示音量图形示意
				aManager.adjustStreamVolume(
					AudioManager.STREAM_MUSIC
					, AudioManager.ADJUST_LOWER
					, AudioManager.FLAG_SHOW_UI);
			}
		});
		mute.setOnCheckedChangeListener(new OnCheckedChangeListener()
		{
			@Override
			public void onCheckedChanged(CompoundButton source
				, boolean isChecked)
			{
				// 指定调节音乐的音频，根据isChecked确定是否需要静音
				aManager.setStreamMute(AudioManager.STREAM_MUSIC
					, isChecked);
			}
		});
	}
}</codebox></node><node name="Vibrator" prog_lang="custom-colors" readonly="False" tags="Service" unique_id="15"><rich_text>vibrator = (Vibrator)getSystemService(Service.VIBRATOR_SERVICE);

vibrator.vibrate(2000);
vibrator.vibrate(new int[400,800,1200,1600]);
vibrator.cancel()</rich_text></node><node name="Alarm" prog_lang="custom-colors" readonly="False" tags="Service" unique_id="16"><rich_text>aManager = (AlarmManager) getSystemService(Service.ALARM_SERVICE);

aManager.set
            .setRepeating
            .Cancel
            
            是一个全局定时器，用的是millionTime,可以选择在关机状态下定时启动指定的组件，组件再完成它的任务，从这个角度，无所不能……</rich_text><node name="WallpaperManager" prog_lang="custom-colors" readonly="False" tags="Service" unique_id="17"><rich_text></rich_text></node></node></node></node></cherrytree>