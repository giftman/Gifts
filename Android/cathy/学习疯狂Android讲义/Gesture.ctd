<?xml version="1.0" ?><cherrytree><node name="Ｇesture" prog_lang="custom-colors" readonly="False" tags="CrazyAndroid" unique_id="1"><rich_text>１、创建一个GestureDetector。
2 . 为应用程序的Activity或者特定的组件的TouchEvent事件绑定监听器。

图片缩小放大初版：

</rich_text><codebox char_offset="79" frame_height="200" frame_width="700" highlight_brackets="False" show_line_numbers="False" syntax_highlighting="java" width_in_pixels="True">public class MainActivity extends Activity implements OnGestureListener{
	GestureDetector detector;
	ImageView imageView;
	int width,height;
	float currentScale=1;
	Bitmap bitmap;
	Matrix matrix;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);
		detector=new GestureDetector(this,this);
		imageView=(ImageView)findViewById(R.id.show);
		matrix =new Matrix();
		bitmap=BitmapFactory.decodeResource(this.getResources(), R.drawable.ic_launcher);
		width=bitmap.getWidth();
		height=bitmap.getHeight();
		imageView.setImageBitmap(BitmapFactory.decodeResource(this.getResources(), R.drawable.ic_launcher));
	}
	
	@Override
	public boolean onTouchEvent(MotionEvent event) {
		
		return detector.onTouchEvent(event);
	}
	@Override
	public boolean onDown(MotionEvent arg0)
	{
		 
		return false;
	}
	@Override
	public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX,
		float velocityY)
	{
		velocityX = velocityX &gt; 4000 ? 4000:velocityX;
		velocityX = velocityX &lt; -4000 ? -4000:velocityX;
		currentScale +=currentScale * velocityX /4000.0f;
		currentScale = currentScale &gt; 0.1f? currentScale:0.1f;
		matrix.reset();
		matrix.setScale(currentScale, currentScale,160,200);
		BitmapDrawable tmp =(BitmapDrawable)imageView.getDrawable();
		if(!tmp.getBitmap().isRecycled()){
			tmp.getBitmap().recycle();
		}
		Bitmap bitmap2=Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
		imageView.setImageBitmap(bitmap2);
		return true;
	}
	@Override
	public void onLongPress(MotionEvent e)
	{
		 	
	}
	@Override
	public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX,
		float distanceY)
	{
		 
		return false;
	}
	@Override
	public void onShowPress(MotionEvent e)
	{
		 		
	}
	@Override
	public boolean onSingleTapUp(MotionEvent e)
	{
		 
		return false;
	}
}
</codebox><node name="手势检测" prog_lang="custom-colors" readonly="False" tags="gesture" unique_id="2"><rich_text></rich_text><node name="onDown" prog_lang="custom-colors" readonly="False" tags="gesture" unique_id="4"><rich_text></rich_text></node><node name="onFling" prog_lang="custom-colors" readonly="False" tags="gesture" unique_id="5"><rich_text></rich_text></node><node name="onLongPress" prog_lang="custom-colors" readonly="False" tags="gesture" unique_id="6"><rich_text></rich_text></node><node name="onScroll" prog_lang="custom-colors" readonly="False" tags="gesture" unique_id="7"><rich_text></rich_text></node><node name="showPress" prog_lang="custom-colors" readonly="False" tags="gesture" unique_id="8"><rich_text></rich_text></node><node name="onSingleTapUp" prog_lang="custom-colors" readonly="False" tags="gesture" unique_id="9"><rich_text></rich_text></node></node><node name="ViewFlipper" prog_lang="custom-colors" readonly="False" tags="gesture" unique_id="10"><rich_text>ViewFlipper组件其实是一个窗口类组件，因此可调用addView(View v)添加多个组件，一旦向ViewFlipper中添加了多个组件之后，ViewFlipper可使用动画控制多个组件之间的切换效果。






</rich_text><codebox char_offset="108" frame_height="200" frame_width="700" highlight_brackets="False" show_line_numbers="False" syntax_highlighting="xml" width_in_pixels="True"> &lt;ViewFlipper
        android:id=&quot;@+id/flipper&quot;
        android:layout_width=&quot;fill_parent&quot;
        android:layout_height=&quot;fill_parent&quot;
        
         /&gt;
         
         
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;   
&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;   
    &lt;translate android:fromXDelta=&quot;100%p&quot; android:toXDelta=&quot;0&quot;   
        android:duration=&quot;500&quot; /&gt;  
&lt;alpha android:fromAlpha=&quot;0.1&quot; android:toAlpha=&quot;1.0&quot;   
        android:duration=&quot;500&quot; /&gt;           
&lt;/set&gt;   

&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;   
&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;   
    &lt;translate android:fromXDelta=&quot;0&quot; android:toXDelta=&quot;-100%p&quot;   
        android:duration=&quot;500&quot; /&gt; 
&lt;alpha android:fromAlpha=&quot;0.1&quot; android:toAlpha=&quot;1.0&quot;   
        android:duration=&quot;500&quot; /&gt;             
&lt;/set&gt;

&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;   
&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;   
    &lt;translate android:fromXDelta=&quot;-100%p&quot; android:toXDelta=&quot;0&quot;   
        android:duration=&quot;500&quot; /&gt; 
&lt;alpha android:fromAlpha=&quot;0.1&quot; android:toAlpha=&quot;1.0&quot;   
        android:duration=&quot;500&quot; /&gt;              
&lt;/set&gt;  

&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;   
&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;   
    &lt;translate android:fromXDelta=&quot;0&quot; android:toXDelta=&quot;100%p&quot;   
        android:duration=&quot;500&quot; /&gt;   
&lt;alpha android:fromAlpha=&quot;0.1&quot; android:toAlpha=&quot;1.0&quot;   
        android:duration=&quot;500&quot; /&gt;            
&lt;/set&gt;   </codebox><codebox char_offset="114" frame_height="200" frame_width="700" highlight_brackets="False" show_line_numbers="False" syntax_highlighting="java" width_in_pixels="True">public class MainActivity extends Activity
implements OnGestureListener
{
// ViewFlipper实例
ViewFlipper flipper;
// 定义手势检测器实例
GestureDetector detector;
//定义一个动画数组，用于为ViewFlipper指定切换动画效果
Animation[] animations = new Animation[4];
//定义手势动作两点之间的最小距离
final int FLIP_DISTANCE = 50;
@Override
public void onCreate(Bundle savedInstanceState)
{
	super.onCreate(savedInstanceState);
	setContentView(R.layout.main);
	//创建手势检测器
	detector = new GestureDetector(this,this);
	// 获得ViewFlipper实例
	flipper = (ViewFlipper) this.findViewById(R.id.flipper);
	// 为ViewFlipper添加5个ImageView组件
	flipper.addView(addImageView(R.drawable.java));
	flipper.addView(addImageView(R.drawable.ee));
	flipper.addView(addImageView(R.drawable.ajax));
	flipper.addView(addImageView(R.drawable.xml));
	flipper.addView(addImageView(R.drawable.classic));
	//初始化Animation数组
	animations[0] = AnimationUtils.loadAnimation(this
		, R.anim.left_in);
	animations[1] = AnimationUtils.loadAnimation(this
		, R.anim.left_out);
	animations[2] = AnimationUtils.loadAnimation(this
		, R.anim.right_in);
	animations[3] = AnimationUtils.loadAnimation(this
		, R.anim.right_out);
}

// 定义添加ImageView的工具方法
private View addImageView(int resId)
{
	ImageView imageView = new ImageView(this);
	imageView.setImageResource(resId);
	imageView.setScaleType(ImageView.ScaleType.CENTER);
	return imageView;
}

@Override
public boolean onFling(MotionEvent event1, MotionEvent event2,
	float velocityX, float velocityY)
{
	/*
	 * 如果第一个触点事件的X座标大于第二个触点事件的X座标超过FLIP_DISTANCE
	 * 也就是手势从右向左滑。
	 */
	if (event1.getX() - event2.getX() &gt; FLIP_DISTANCE)
	{
		// 为flipper设置切换的的动画效果
		flipper.setInAnimation(animations[0]);
		flipper.setOutAnimation(animations[1]);
		flipper.showPrevious();
		return true;
	}
	/*
	 * 如果第二个触点事件的X座标大于第一个触点事件的X座标超过FLIP_DISTANCE 
	 * 也就是手势从右向左滑。
	 */
	else if (event2.getX() - event1.getX() &gt; FLIP_DISTANCE)
	{
		// 为flipper设置切换的的动画效果
		flipper.setInAnimation(animations[2]);
		flipper.setOutAnimation(animations[3]);
		flipper.showNext();
		return true;
	}
	return false;
}
@Override
public boolean onTouchEvent(MotionEvent event)
{
	//将该Activity上的触碰事件交给GestureDetector处理
	return detector.onTouchEvent(event);
}	

@Override
public boolean onDown(MotionEvent arg0)
{
	return false;
}
@Override
public void onLongPress(MotionEvent event)
{
}
@Override
public boolean onScroll(MotionEvent event1, MotionEvent event2,
	float arg2, float arg3)
{
	return false;
}

@Override
public void onShowPress(MotionEvent event)
{
}
@Override
public boolean onSingleTapUp(MotionEvent event)
{
	return false;
}	
}</codebox></node><node name="增加手势" prog_lang="custom-colors" readonly="False" tags="gesture" unique_id="3"><rich_text>我忽略了，除非是做心情猜测器</rich_text></node><node name="TTS" prog_lang="custom-colors" readonly="False" tags="gesture" unique_id="11"><rich_text>P348
１　创建TextToSpeech对象，创建时传入OnInitListener监听创建是否成功
２　设置TextToSpeech所使用语言，国家选项
３　调用 speak/synthesizeToFile
4  关闭
</rich_text></node></node></cherrytree>