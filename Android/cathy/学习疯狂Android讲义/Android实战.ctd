<?xml version="1.0" ?><cherrytree><node name="Android实战" prog_lang="custom-colors" readonly="False" tags="API" unique_id="1"><rich_text></rich_text><node name="Fragment" prog_lang="custom-colors" readonly="False" tags="API" unique_id="2"><rich_text>通过large文件然后在在inflate之前判断是否有container来决定生成one or two layout


如果你的activity允许移除或者替换fragment，你应该在activity的onCreate()方法中添加初始化的fragment。在你处理fragment的时候，有一个很重要的规则(尤其是你在运行时添加fragment) 那就是你的fragment放置位置的布局中必须有一个视图容器。


public class ArticleFragment extends ListFragment{
	OnArticleFragmentListener mCallback;
	final static String ARG_POSITION = &quot;position&quot;;
	int mCurrentPosition = -1;
	File currentParent;
	File[] currentFiles;
	String path[] = new String[]{&quot;/mnt/sdcard&quot;,&quot;/mnt/sdcard/&quot;};
	
	public interface OnArticleFragmentListener {
        /** Called by HeadlinesFragment when a list item is selected */
        public void onPathSelected(int position);
    }

	public void onCreate(Bundle savedInstanceState) {
//		if(savedInstanceState != null){
//			mCurrentPosition = savedInstanceState.getInt(ARG_POSITION);
//		}
		File root = new File(&quot;/mnt/sdcard/&quot;);
		 
			currentParent = root;
			currentFiles = root.listFiles();
			List&lt;Map&lt;String, Object&gt;&gt; listItems = new ArrayList&lt;Map&lt;String,Object&gt;&gt;();
			for (int i = 0; i&lt; currentFiles.length ; i++){
				Map&lt;String, Object&gt; listItem = new HashMap&lt;String, Object&gt;();
				if(currentFiles[i].isDirectory())
				{
					listItem.put(&quot;icon&quot;, R.drawable.collectionscollection);
				}else
				{
					listItem.put(&quot;icon&quot;, R.drawable.hardwareheadphones);
				}
				listItem.put(&quot;fileName&quot;, currentFiles[i].getName());
				listItem.put(&quot;info&quot;,currentFiles[i].getTotalSpace());
				listItems.add(listItem);
			}
			SimpleAdapter simpleAdapter = new SimpleAdapter(getActivity(), listItems, R.layout.filefragment
					,new String[]{&quot;icon&quot;,&quot;fileName&quot;,&quot;info&quot;}, new int[]{R.id.icon,R.id.fileName,R.id.fileinfo});
			setListAdapter(simpleAdapter);
 
	}
	
	public void inflateListView(File[] files)
	{
		List&lt;Map&lt;String, Object&gt;&gt; listItems = new ArrayList&lt;Map&lt;String,Object&gt;&gt;();
		for (int i = 0; i&lt; files.length ; i++){
			Map&lt;String, Object&gt; listItem = new HashMap&lt;String, Object&gt;();
			if(files[i].isDirectory())
			{
				listItem.put(&quot;icon&quot;, R.drawable.collectionscollection);
			}else
			{
				listItem.put(&quot;icon&quot;, R.drawable.hardwareheadphones);
			}
			listItem.put(&quot;fileName&quot;, files[i].getName());
			listItem.put(&quot;info&quot;,files[i].getTotalSpace());
			listItems.add(listItem);
		}
		SimpleAdapter simpleAdapter = new SimpleAdapter(getActivity(), listItems, R.layout.filefragment
				,new String[]{&quot;icon&quot;,&quot;fileName&quot;,&quot;info&quot;}, new int[]{R.id.icon,R.id.fileName,R.id.fileinfo});
		setListAdapter(simpleAdapter);
	}
	
	@Override
	public void onStart() {
		// TODO Auto-generated method stub
		super.onStart();
		 if (getFragmentManager().findFragmentById(R.id.articalFragment) != null) {
	            getListView().setChoiceMode(ListView.CHOICE_MODE_SINGLE);
	            getListView().setDivider(null);
	            //getListView().setBackgroundColor(Color.LTGRAY);
	        }
//		Bundle args = getArguments();
//		if(args != null){
//			updateArticleView(args.getInt(ARG_POSITION));
//		}else if (mCurrentPosition != -1){
//			updateArticleView(mCurrentPosition);
//		}
	}
	
	public void updateArticleView(int position){
		 
	}
	
	@Override
	public void onSaveInstanceState(Bundle outState) {
		// TODO Auto-generated method stub
		super.onSaveInstanceState(outState);
		outState.putInt(ARG_POSITION, mCurrentPosition);
	}
	
	@Override
	public void onAttach(Activity activity) {
		// TODO Auto-generated method stub
		super.onAttach(activity);
		try {
            mCallback = (OnArticleFragmentListener) activity;
        } catch (ClassCastException e) {
            throw new ClassCastException(activity.toString()
                    + &quot; must implement OnArticleFragmentListener&quot;);
        }
	}
	@Override
	public void onListItemClick(ListView l, View v, int position, long id) {
		// TODO Auto-generated method stub
		super.onListItemClick(l, v, position, id);
	}
}
</rich_text></node><node name="我的文件管理器" prog_lang="custom-colors" readonly="False" tags="" unique_id="5"><rich_text>看小米的文件管理器，看不下去……</rich_text></node></node><node name="代码" prog_lang="custom-colors" readonly="False" tags="API" unique_id="3"><rich_text></rich_text><node name="change文件大小到kb" prog_lang="custom-colors" readonly="False" tags="API" unique_id="4"><rich_text>    转换文件大小
long mylength = file.length();//得到的大小为b
String mylengthString=formatSize(mylength);
 
 
   public static String formatSize(float size)  
    {  
        long kb = 1024;  
        long mb = (kb * 1024);  
        long gb  = (mb * 1024);  
        if (size &lt; kb) {  
            return String.format(&quot;%d B&quot;, (int) size);  
        }  
        else if (size &lt; mb) {  
            return String.format(&quot;%.2f KB&quot;, size / kb); //保留两位小数  
        }  
        else if (size &lt; gb) {  
            return String.format(&quot;%.2f MB&quot;, size / mb);  
        }  
        else {  
            return String.format(&quot;%.2f GB&quot;, size / gb);  
        }  
    }  
  </rich_text></node></node></cherrytree>